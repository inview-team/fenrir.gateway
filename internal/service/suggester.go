package service

import (
	"fmt"
	"log"

	"chatops-bot/internal/models"
)

// ActionSuggester –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.
type ActionSuggester struct{}

// NewActionSuggester —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ActionSuggester.
func NewActionSuggester() *ActionSuggester {
	return &ActionSuggester{}
}

// SuggestActions –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è "–±—ã—Å—Ç—Ä–æ–≥–æ –ø—É—Ç–∏".
func (s *ActionSuggester) SuggestActions(incident *models.Incident) []models.SuggestedAction {
	var suggestions []models.SuggestedAction

	// –ü—Ä–∞–≤–∏–ª–æ 1: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–ø–ª–∏–∫–∞–º–∏ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞
	if alertName, ok := incident.Labels["alertname"]; ok && alertName == "KubeDeploymentReplicasMismatch" {
		if deploymentName, ok := incident.AffectedResources["deployment"]; ok {
			params := map[string]string{
				"deployment": incident.AffectedResources["deployment"],
				"namespace":  incident.AffectedResources["namespace"],
			}
			suggestions = append(suggestions, models.SuggestedAction{
				HumanReadable: fmt.Sprintf("‚è™ –û—Ç–∫–∞—Ç–∏—Ç—å %s", deploymentName),
				Action:        string(models.ActionRollbackDeployment),
				Parameters:    params,
			})
		}
	}

	// –ü—Ä–∞–≤–∏–ª–æ 2: Pod –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CrashLoopBackOff
	if alertName, ok := incident.Labels["alertname"]; ok && alertName == "KubePodCrashLooping" {
		if podName, ok := incident.AffectedResources["pod"]; ok {
			suggestions = append(suggestions, models.SuggestedAction{
				HumanReadable: fmt.Sprintf("üìÑ –õ–æ–≥–∏ –ø–æ–¥–∞ %s", podName),
				Action:        string(models.ActionGetPodLogs),
				Parameters: map[string]string{
					"pod":       incident.AffectedResources["pod"],
					"namespace": incident.AffectedResources["namespace"],
				},
			})
		}
	}

	log.Printf("Generated %d suggestions for incident %d", len(suggestions), incident.ID)
	return suggestions
}

// SuggestActionsForResource –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.
func (s *ActionSuggester) SuggestActionsForResource(incident *models.Incident, resourceType, resourceName string) []models.SuggestedAction {
	var suggestions []models.SuggestedAction
	namespace := incident.AffectedResources["namespace"]

	switch resourceType {
	case "deployment":
		params := map[string]string{"deployment": resourceName, "namespace": namespace}
		suggestions = append(suggestions,
			models.SuggestedAction{
				HumanReadable: "‚è™ –û—Ç–∫–∞—Ç–∏—Ç—å",
				Action:        string(models.ActionRollbackDeployment),
				Parameters:    params,
			},
			models.SuggestedAction{
				HumanReadable: "üì¶ –°–ø–∏—Å–æ–∫ –ø–æ–¥–æ–≤",
				Action:        string(models.ActionListPodsForDeployment),
				Parameters:    params,
			},
			models.SuggestedAction{
				HumanReadable: "‚ÑπÔ∏è –û–ø–∏—Å–∞—Ç—å (Describe)",
				Action:        string(models.ActionDescribeDeployment),
				Parameters:    params,
			},
		)
	case "pod":
		params := map[string]string{"pod_name": resourceName, "namespace": namespace}
		suggestions = append(suggestions,
			models.SuggestedAction{
				HumanReadable: "üìÑ –õ–æ–≥–∏",
				Action:        string(models.ActionGetPodLogs),
				Parameters:    map[string]string{"pod": resourceName, "namespace": namespace},
			},
			models.SuggestedAction{
				HumanReadable: "‚ÑπÔ∏è –û–ø–∏—Å–∞—Ç—å (Describe)",
				Action:        string(models.ActionDescribePod),
				Parameters:    map[string]string{"pod": resourceName, "namespace": namespace},
			},
			models.SuggestedAction{
				HumanReadable: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
				Action:        string(models.ActionDeletePod),
				Parameters:    params,
			},
		)
	}

	return suggestions
}
